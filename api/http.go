package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/rs/zerolog/log"
	"github.com/scott-dn/go-boilerplate/internal/app"

	echoSwagger "github.com/swaggo/echo-swagger"

	// docs is generated by Swag CLI.
	_ "github.com/scott-dn/go-boilerplate/api/docs"
)

// @title						Service API
// @version					1.0
// @description				This is a service
//
// @schemes					http
//
// @host						localhost:8080
// @BasePath					/service/api/v1/
//
// @securityDefinitions.apikey	ApiKeyAuth
// @in							header
// @name						Authorization
// @description				Enter your token.
func StartHTTPServer(app *app.App) {
	server := echo.New()

	healthcheck := newHealthCheckService()
	registerHealthcheck(server, app, healthcheck)

	server.GET("/swagger/*", echoSwagger.WrapHandler)

	initMetrics(server)
	setUpHTTPServer(server)
	registerMiddleware(server, app)

	registerRoutes(server.Group("/service/api/v1"), app)

	go func() {
		addr := fmt.Sprintf(":%d", app.Config.HTTPPort)
		if err := server.Start(addr); !errors.Is(err, http.ErrServerClosed) {
			log.Panic().Err(err).Msg("failed to start http server")
		}
	}()

	gracefullyShutdown(app, server, healthcheck)
}

func registerMiddleware(server *echo.Echo, app *app.App) {
	server.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOriginFunc: func(origin string) (bool, error) {
			url, err := url.Parse(origin)
			if err != nil {
				return false, err
			}
			host := url.Hostname()
			for _, whiteListDomain := range app.Config.CORS {
				if whiteListDomain == "*" || whiteListDomain == host {
					return true, nil
				}
			}
			return false, nil
		},
	}))
	server.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{
		ErrorMessage: "Request timeout",
		Timeout:      1 * time.Second,
	}))
	server.Use(middleware.BodyLimit("10K"))
	server.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
		LogErrorFunc: func(c echo.Context, err error, stack []byte) error {
			if app.Config.GoENV == "local" {
				buildUnhandledErrorLog(err, c, string(stack), "")
			} else {
				buildUnhandledErrorLog(err, c, "unhandled error", string(stack))
			}
			return c.JSONBlob(http.StatusInternalServerError, []byte(`{"message":"Internal Server Error"}`))
		},
	}))
	server.Use(middleware.Decompress())
	server.Use(middleware.RemoveTrailingSlash())
	server.Use(middleware.RequestID())
	server.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{
		LogRequestID: true,
		LogMethod:    true,
		LogURI:       true,
		LogStatus:    true,
		LogValuesFunc: func(c echo.Context, value middleware.RequestLoggerValues) error {
			log.Info().
				Str("id", value.RequestID).
				Str("method", value.Method).
				Str("uri", value.URI).
				Int("status", value.Status).
				Msg("request")
			return nil
		},
	}))
	server.Use(middleware.GzipWithConfig(middleware.GzipConfig{
		Level: 5,
	}))
}

func setUpHTTPServer(server *echo.Echo) {
	server.Debug = false
	server.DisableHTTP2 = true
	server.HideBanner = true
	server.HidePort = true
	server.Logger.SetLevel(255) // Off
	server.Validator = newValidator()
	server.HTTPErrorHandler = func(err error, c echo.Context) {
		if c.Response().Committed {
			return
		}
		code := http.StatusInternalServerError
		message := "Internal Server Error"
		var httpError *echo.HTTPError
		if errors.As(err, &httpError) {
			code = httpError.Code
			message = fmt.Sprintf("%v", httpError.Message)
		} else {
			buildUnhandledErrorLog(err, c, "unhandled error", "")
		}
		if err := c.JSONBlob(code, []byte(fmt.Sprintf(`{"message":"%s"}`, message))); err != nil {
			log.Error().Err(err).Msg("failed to send error response")
		}
	}
}

func buildUnhandledErrorLog(err error, c echo.Context, msg string, stackStrace string) {
	reqBody := c.Get("body")
	body := []byte{}
	if reqBody != nil {
		body, err = json.Marshal(reqBody)
		if err != nil {
			log.Error().Err(err).Msg("failed to marshal request body")
		}
	}
	log.Error().
		Err(err).
		Str("id", c.Response().Header().Get(echo.HeaderXRequestID)).
		Str("method", c.Request().Method).
		Str("uri", c.Request().RequestURI).
		Int("status", 500).
		Str("headers", fmt.Sprintf("%v", c.Request().Header)).
		Str("body", string(body)).
		Str("stack_trace", stackStrace).
		Msg(msg)
}
