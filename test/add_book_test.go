package book_test

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"testing"

	"github.com/scott-dn/go-boilerplate/internal/response"
)

func TestAddBookWithInvalidToken(t *testing.T) {
	t.Parallel()

	tokens := []string{"", "Beare", "Bearer", "Bearer 123"}

	for _, token := range tokens {
		req, err := http.NewRequestWithContext(
			context.Background(),
			http.MethodPost,
			"http://localhost:8080/service/api/v1/books",
			nil,
		)
		if err != nil {
			t.Fatalf("Got error: %v", err)
		}
		req.Header.Set("authorization", token)

		client := http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			t.Fatalf("Got error: %v", err)
		}
		defer resp.Body.Close()

		_, err = io.ReadAll(resp.Body)
		if err != nil {
			t.Fatalf("Got error: %v", err)
		}
		if resp.StatusCode != http.StatusUnauthorized {
			t.Fatalf("Got status code: %v But expect: %v", resp.StatusCode, http.StatusUnauthorized)
		}
	}
}

func TestAddBookWithUnauthorizedToken(t *testing.T) {
	t.Parallel()

	req, err := http.NewRequestWithContext(
		context.Background(),
		http.MethodPost,
		"http://localhost:8080/service/api/v1/books",
		nil,
	)
	if err != nil {
		t.Fatalf("Got error: %v", err)
	}

	//nolint:lll
	req.Header.Set("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20ifQ.3QJBsXLwBNSyLWLDA5nugTzc83x9Ac9zsxKkghKJ__E")

	client := http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		t.Fatalf("Got error: %v", err)
	}
	defer resp.Body.Close()

	_, err = io.ReadAll(resp.Body)
	if err != nil {
		t.Fatalf("Got error: %v", err)
	}
	if resp.StatusCode != http.StatusForbidden {
		t.Fatalf("Got status code: %v But expect: %v", resp.StatusCode, http.StatusForbidden)
	}
}

func TestAddBookWithInvalidRequestBody(t *testing.T) {
	t.Parallel()

	//nolint:lll
	bodies := [][]byte{
		[]byte(``), []byte(`{}`),
		[]byte(`{"name":""}`), []byte(`{"name":"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"}`),
		[]byte(`{"name":"1","author":""}`), []byte(`{"name":"1","author":"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"}`),
		[]byte(`{"name":"1","author":"1","description":""}`), []byte(`{"name":"1","author":"1","description}`),
	}

	for _, body := range bodies {
		req, err := http.NewRequestWithContext(
			context.Background(),
			http.MethodPost,
			"http://localhost:8080/service/api/v1/books",
			bytes.NewReader(body),
		)
		if err != nil {
			t.Fatalf("Got error: %v", err)
		}

		//nolint:lll
		req.Header.Set("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIn0.KCxI3hD2u8QlZ76J_T_OqOUwWmIetfKJfmwRDBiBFVQ")
		req.Header.Set("content-type", "application/json")

		client := http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			t.Fatalf("Got error: %v", err)
		}
		defer resp.Body.Close()

		_, err = io.ReadAll(resp.Body)
		if err != nil {
			t.Fatalf("Got error: %v", err)
		}
		if resp.StatusCode != http.StatusBadRequest {
			t.Fatalf("Got status code: %v But expect: %v", resp.StatusCode, http.StatusBadRequest)
		}
	}
}

func TestAddBookWithValidRequestBody(t *testing.T) { //nolint:paralleltest
	req, err := http.NewRequestWithContext(
		context.Background(),
		http.MethodPost,
		"http://localhost:8080/service/api/v1/books",
		bytes.NewReader([]byte(`{"name":"1","author":"2","description":"3"}`)),
	)
	if err != nil {
		t.Fatalf("Got error: %v", err)
	}

	//nolint:lll
	req.Header.Set("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIn0.KCxI3hD2u8QlZ76J_T_OqOUwWmIetfKJfmwRDBiBFVQ")
	req.Header.Set("content-type", "application/json")

	client := http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		t.Fatalf("Got error: %v", err)
	}
	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		t.Fatalf("Got error: %v", err)
	}
	if resp.StatusCode != http.StatusCreated {
		t.Fatalf("Got status code: %v But expect: %v", resp.StatusCode, http.StatusCreated)
	}

	var actual response.Book
	json.Unmarshal(respBody, &actual) //nolint:errcheck

	if actual.Data.Name != "1" {
		t.Fatalf("Got: %v But expect: %v", actual.Data.Name, "1")
	}
	if actual.Data.Author != "2" {
		t.Fatalf("Got: %v But expect: %v", actual.Data.Author, "2")
	}
	if actual.Data.Description != "3" {
		t.Fatalf("Got: %v But expect: %v", actual.Data.Description, "3")
	}
	if actual.Data.Version != 1 {
		t.Fatalf("Got: %v But expect: %v", actual.Data.Version, 1)
	}
	if actual.Data.CreatedBy != "admin@example.com" {
		t.Fatalf("Got: %v But expect: %v", actual.Data.CreatedBy, "admin@example.com")
	}
	if actual.Data.UpdatedBy != "admin@example.com" {
		t.Fatalf("Got: %v But expect: %v", actual.Data.UpdatedBy, "admin@example.com")
	}
}
